#!/bin/bash
#
### BEGIN INIT INFO
# Provides:       aem
# Required-Start:  mysqld snmptrapd postfix
# Required-Stop: mysqld snmptrapd postfix
# Should-Start:
# Should-Stop:
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Short-Description: Manages AEM Daemons
# Description:    Manages AEM Daemons
### END INIT INFO

# 
#
# Start on runlevels 3, 4 and 5. Start late, kill early.
# chkconfig: 345 95 05
#
#
#!/bin/bash

# absolute path to executable binary
proguser='aemuser'
progpath[0]='/in/AEM/bin/spool_daemon'
progpath[1]='/in/AEM/mail/mail_daemon'
progpath[2]='/in/AEM/bin/apagent_daemon'


eval_cmd() {
  local rc=$1
  if [ $rc -eq 0 ]; then
    echo '[  OK  ]'
  else
    echo '[FAILED]'
  fi
  return $rc
}

start() {
	local curruser=$(id -u -n)
	for p in "${progpath[@]}" ; do
		local prog=$(basename $p)

		# make sure full path to executable binary is found
		! [ -x $p ] && echo "$p: executable not found" && exit 1

		# see if running
		local pids=$(pgrep $prog)

		if [ -n "$pids" ]; then
			echo "$prog (pid $pids) is already running"
			return 0
		fi

		case $curruser in
			$proguser)
				printf "%-50s%s" "Starting $prog: " ''
				$p &
				;;
			"root")
				printf "%-50s%s" "Starting $prog as $proguser: " ''
				/bin/su - $proguser -c "nohup $p 1> /dev/null 2> /dev/null &"
				;;
			*)
				echo "User $curruser is not authorized to run this script."
				exit 1
				;;
		esac

		# check again if running
		pgrep $prog >/dev/null 2>&1
		eval_cmd $?
	done
}

stop() {
	for p in "${progpath[@]}" ; do
		local prog=$(basename $p)

		# see if running
		local pgid=$(ps -eo pgid,comm | grep -v grep | grep $prog | awk '{print $1}')

		if [ -z "$pgid" ]; then
			echo "$prog not running"
			continue
		fi
		printf "%-50s%s" "Stopping $prog: " ''
		kill -9 -$pgid
		eval_cmd $?
	done
}

status() {
	for p in "${progpath[@]}" ; do
		local prog=$(basename $p)

		# see if running
		local pids=$(pgrep $prog)

		if [ -n "$pids" ]; then
			echo "$prog (pid $pids) is running"
		else
			echo "$prog is stopped"
		fi
	done
}

case $1 in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart)
    stop
    sleep 1
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart}"
    exit 1
esac

exit $?
